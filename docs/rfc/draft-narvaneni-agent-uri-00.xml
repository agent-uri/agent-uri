<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.29 (Ruby 3.0.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="trust200902" docName="draft-narvaneni-agent-uri-00" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="agent-uri">The agent:// Protocol — A URI-Based Framework for Interoperable Agents</title>

    <author initials="Y." surname="Narvaneni" fullname="Yaswanth Narvaneni">
      <organization>Independent Researcher</organization>
      <address>
        <postal>
          <city>London</city>
        </postal>
        <email>yaswanth@gmail.com</email>
      </address>
    </author>

    <date year="2025" month="April" day="21"/>

    <area>Applications</area>
    <workgroup>Independent Submission</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 148?>

<t>This document defines the <spanx style="verb">agent://</spanx> protocol, a URI-based framework for addressing, invoking, and interoperating with autonomous and semi-autonomous software agents. It introduces a layered architecture that supports minimal implementations (addressing and transport) and extensible features (capability discovery, contracts, orchestration). The protocol aims to foster interoperability among agents across ecosystems, platforms, and modalities, enabling composable and collaborative intelligent systems.</t>



    </abstract>



  </front>

  <middle>


<?line 152?>

<section anchor="introduction"><name>Introduction</name>

<t>The rise of intelligent software agents necessitates a standardized way to identify, invoke, and coordinate them across diverse platforms. While protocols like HTTP provide a transport mechanism for static APIs, agents differ significantly in behavior, output variability, and interaction patterns. The <spanx style="verb">agent://</spanx> proposes a URI scheme and resolution model designed to complement existing agent communication protocol like Agent2Agent(A2A), FIPA ACL, Contract Net Protocol (CNP), LangChain etc. It serves as an addressing and discovery layer that works alongside these communication protocol.</t>

<figure title="Agent Protocol Stack Architecture" anchor="fig-protocol-stack"><artwork><![CDATA[
+------------------+
| Agent Applications|
+------------------+
        ↓  ↑
+------------------+
|   agent:// URI   | ← Addressing, Resolution, Discovery
+------------------+
        ↓  ↑
+------------------+     +------------------+
|  Agent2Agent     |     |    CNP,. etc     | ← Communication Protocols
+------------------+     +------------------+
        ↓  ↑                    ↓  ↑
+------------------+     +------------------+
| Transport Layer  |     | Transport Layer  | ← HTTP, WebSockets, etc.
+------------------+     +------------------+
]]></artwork></figure>

<t>The <spanx style="verb">agent://</spanx> protocol supports:</t>

<t><list style="symbols">
  <t>Unique and resolvable addressing of agents</t>
  <t>Optional self-describing capabilities</t>
  <t>Consistent invocation semantics over existing transports</t>
  <t>Progressive support for advanced patterns like delegation, collaboration, and orchestration</t>
</list></t>

<t>This document outlines the specification for the <spanx style="verb">agent://</spanx> protocol, beginning with its URI scheme and extending through capability description, transport bindings, and extensibility patterns.</t>

<t>A reference implementation of the <spanx style="verb">agent://</spanx> protocol is available to demonstrate resolution, transport bindings, capability discovery, and orchestration patterns. Implementers and adopters can find this example implementation at: <xref target="AGENT-URI-REPO"></xref></t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t><list style="symbols">
  <t><strong>Agent</strong>: An autonomous or semi-autonomous software entity that can receive instructions and perform actions.</t>
  <t><strong>Agent Descriptor (agent.json)</strong>: A machine-readable document that describes an agent’s identity, capabilities, and behavior.</t>
  <t><strong>Capability</strong>: A self-contained function or behavior an agent offers.</t>
  <t><strong>Resolver</strong>: A service or mechanism that maps a URI to a network endpoint or metadata.</t>
  <t><strong>Invocation</strong>: The act of calling a capability on an agent with input parameters.</t>
</list></t>

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in BCP 14 RFC2119 and RFC8174 when, and only when, they appear in all capitals, as shown here.</t>

</section>
<section anchor="protocol-scope"><name>Protocol Scope and Layering</name>

<t>The <spanx style="verb">agent://</spanx> protocol is designed as a layered framework:</t>

<texttable title="Protocol Layering Structure" anchor="tab-protocol-layers">
      <ttcol align='left'>Layer</ttcol>
      <ttcol align='left'>Purpose</ttcol>
      <ttcol align='left'>Mandatory</ttcol>
      <c>URI Scheme</c>
      <c>Unique addressing</c>
      <c>Yes</c>
      <c>Transport Binding</c>
      <c>Mechanism for invocation (e.g., HTTP, WSS, Matrix, IPC)</c>
      <c>Yes</c>
      <c>Agent Descriptor</c>
      <c>Self-describing agent interface</c>
      <c>Optional</c>
      <c>Resolution Framework</c>
      <c>Maps agent URIs to endpoints</c>
      <c>Optional</c>
      <c>Application Semantics</c>
      <c>Shared vocab for capability naming</c>
      <c>Optional</c>
</texttable>

<t>This layering allows implementations to adopt minimal or full-featured configurations, depending on their needs.</t>

</section>
<section anchor="uri-scheme-specification"><name>URI Scheme Specification</name>

<t>The format of <spanx style="verb">agent://</spanx> URIs is:</t>

<figure title="Agent URI Format" anchor="fig-uri-format"><artwork><![CDATA[
agent://[authority]/[path]?[query]#[fragment] 
agent+<protocol>://[authority]/[path]
]]></artwork></figure>

<t>Examples:</t>

<t><list style="symbols">
  <t><spanx style="verb">agent://acme.ai/planning/generate-itinerary?city=Paris</spanx></t>
  <t><spanx style="verb">agent://planner.acme.ai/claude?text=Hello</spanx></t>
  <t><spanx style="verb">agent+https://acme.com/assistants/chatgpt?query=hello</spanx></t>
  <t><spanx style="verb">agent+local://claude</spanx></t>
  <t><spanx style="verb">agent://did:web:acme.com:agent:researcher/get-article?doi=...</spanx></t>
</list></t>

<section anchor="uri-components"><name>Components</name>

<t><list style="symbols">
  <t><strong>Authority</strong>: Uniquely identifies the agent or agent namespace (e.g., DNS or DID).</t>
  <t><strong>Path</strong>: Specifies the agent being invoked. The <spanx style="verb">[path]</spanx> is opaque to <spanx style="verb">agent://</spanx> and can represent either a namespace or direct capability.</t>
  <t><strong>Query</strong>: Contains serialized parameters. Query parameters SHOULD be URL-encoded as key=value pairs. If more complex structures are needed, clients SHOULD use HTTP <spanx style="verb">POST</spanx> requests with <spanx style="verb">application/json</spanx> bodies rather than base64-encoding payloads into query parameters.</t>
  <t><strong>Fragment</strong>: Optional reference for context or sub-capability.</t>
  <t>The optional <spanx style="verb">+&lt;protocol&gt;</spanx> indicates explicit transport binding.</t>
  <t>If not specified, clients use resolution or fall back to HTTPS-based invocation.</t>
</list></t>

</section>
<section anchor="uri-abnf"><name>ABNF for <spanx style="verb">agent://</spanx> URI</name>

<figure title="ABNF Grammar for agent:// URI Scheme" anchor="fig-abnf-grammar"><sourcecode type="abnf"><![CDATA[
agent-uri      = "agent" [ "+" protocol ] "://" authority [ "/" path ] [ "?" query ] [ "#" fragment ]

protocol       = 1*( ALPHA / DIGIT / "-" )
authority      = [ userinfo "@" ] host [ ":" port ] ; <authority, defined in RFC3986, Section 3.2>
path           = path-abempty    ; begins with "/" or is empty. Defined in RFC3986, Section 3.3
query          = *( pchar / "/" / "?" ) ; <query, defined in RFC3986, Section 3.4>
fragment       = *( pchar / "/" / "?" ) ; <fragment, defined in RFC3986, Section 3.5>

pchar          = unreserved / pct-encoded / sub-delims / ":" / "@"
unreserved     = ALPHA / DIGIT / "-" / "." / "_" / "~"
pct-encoded    = "%" HEXDIG HEXDIG
sub-delims     = "!" / "$" / "&" / "'" / "(" / ")" / "*" / "+" / "," / ";" / "="

; Character sets like pchar, unreserved, etc. are also defined in RFC3986

]]></sourcecode></figure>

</section>
</section>
<section anchor="resolution-framework"><name>Resolution Framework</name>

<t>Every agent MAY expose a self-describing document at:</t>

<figure><sourcecode type="txt"><![CDATA[
<scheme>://<domain>/<path-to-agent>/agent.json

]]></sourcecode></figure>

<t>If a single agent is deployed at the top level then it should be under <spanx style="verb">/.well-known</spanx> to be compatible with Agent2Agent protocol.</t>

<t><list style="symbols">
  <t><spanx style="verb">/.well-known/agent.json</spanx> — For single-agent deployments (compatible with Agent2Agent)</t>
  <t><spanx style="verb">/.well-known/agents.json</spanx> — For multi-agent domains (maps agent names → descriptors)</t>
</list></t>

<t>This descriptor is OPTIONAL but RECOMMENDED. It enables capability discovery, transport resolution, and compatibility with ecosystem tools.</t>

<t>When present, the descriptor MAY use the AgentCard (as defined by Agent2Agent protocol by Google as of April 2025) schema as one possible format, or any equivalent JSON-LD–based structure that expresses the agent’s identity, capabilities, and behavioral metadata.</t>

<t>If the agent is deployed at a subdomain (e.g., <spanx style="verb">planner.acme.ai</spanx>), the agent descriptor SHOULD be published at <spanx style="verb">/.well-known/agent.json</spanx> on that domain.</t>

<section anchor="ecosystem-registries"><name>Ecosystem Registries</name>

<t>Domains MAY publish:</t>

<figure><sourcecode type="txt"><![CDATA[
https://<domain>/.well-known/agents.json

]]></sourcecode></figure>

<t>This file should map agent names to their <spanx style="verb">agent.json</spanx> URLs for simplified enumeration. It is OPTIONAL but RECOMMENDED for better ecosystem interoperability.</t>

<t>Implementations MAY support resolution of agent URIs via:</t>

<t><list style="symbols">
  <t>Static resolution maps</t>
  <t>DID resolution</t>
  <t>WebFinger or custom resolvers</t>
</list></t>

<t>Resolvers SHOULD support caching and capability introspection where applicable.</t>

<figure title="Agent URI Resolution Process" anchor="fig-resolution-flow"><artwork><![CDATA[
+---------+          +-------------+         +-------------+
|  Client | --URI--> |  Resolver   | -->URL->| Agent Server|
+---------+          +-------------+         +-------------+
                              |
                      (agent.json or agents.json)

]]></artwork></figure>

<t><strong>Example</strong>:</t>

<figure><sourcecode type="json"><![CDATA[
{
  "agents": {
    "planner": "https://planner.acme.ai/.well-known/agent.json",
    "translator": "https://acme.ai/translator/agent.json"
  }
}

]]></sourcecode></figure>

<t>Agents SHOULD use standard HTTP caching mechanisms (<spanx style="verb">Cache-Control</spanx>, <spanx style="verb">ETag</spanx>, <spanx style="verb">Last-Modified</spanx>) to enable efficient resolution and minimize unnecessary descriptor fetches. Clients SHOULD respect these headers and cache descriptors appropriately</t>

</section>
<section anchor="trust-anchors"><name>Trust Anchors</name>

<t>Domains MAY use trust anchors (e.g., DNSSEC, HTTPS certificates, or DID-based verification) to enhance identity assurance.</t>

<t>A practical example of URI resolution, agent descriptor fetching, and caching strategies is included in the reference implementation available at: <xref target="AGENT-URI-REPO"></xref></t>

</section>
</section>
<section anchor="transport-binding"><name>Transport Bindings</name>

<section anchor="explicit-transport-bindings"><name>Explicit Transport Binding</name>

<t>Use the <spanx style="verb">agent+&lt;protocol&gt;://</spanx> scheme for clarity:</t>

<texttable title="Transport Binding Formats" anchor="tab-transport-bindings">
      <ttcol align='left'>Transport</ttcol>
      <ttcol align='left'>Format</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>HTTPS</c>
      <c><spanx style="verb">agent+https://</spanx></c>
      <c>Secure HTTP-based invocation</c>
      <c>WebSocket Secure</c>
      <c><spanx style="verb">agent+wss://</spanx></c>
      <c>Real-time streaming</c>
      <c>Local</c>
      <c><spanx style="verb">agent+local://</spanx></c>
      <c>Runtime-registered local agents</c>
      <c>Unix Socket</c>
      <c><spanx style="verb">agent+unix://</spanx></c>
      <c>IPC for co-located agents</c>
      <c>Matrix</c>
      <c><spanx style="verb">agent+matrix://</spanx></c>
      <c>Decentralized real-time transport</c>
</texttable>

<t>The <spanx style="verb">agent+&lt;transport&gt;://</spanx> scheme allows explicit declaration of such bindings, enabling clarity, extensibility, and optimized routing. When no explicit transport is declared, clients MAY rely on resolution metadata (e.g., <spanx style="verb">agent.json</spanx>) or default to HTTPS-based invocation.</t>

<t>This flexibility ensures the protocol can adapt to different performance, privacy, or coordination requirements while remaining consistent at the addressing and invocation layer.</t>

<t>Local agents should be accessed using:</t>

<figure><sourcecode type="txt"><![CDATA[
agent+local://<agent-name>

]]></sourcecode></figure>

<t>This allows agent runtimes to register their presence using a local resolver (e.g., via IPC, sockets, or service registry). The transport mechanism is implementation-specific.</t>

</section>
<section anchor="fallback-behavior"><name>Default Fallback Behavior</name>

<t>If the protocol is omitted (i.e., <spanx style="verb">agent://</spanx> is used), clients:</t>

<t><list style="numbers" type="1">
  <t>Check <spanx style="verb">.well-known/agents.json</spanx> (if available)</t>
  <t>Retrieve the agent descriptor at <spanx style="verb">agent.json</spanx> for the specified path</t>
  <t>Use the <spanx style="verb">transport</spanx> or <spanx style="verb">endpoint</spanx> hints from the descriptor</t>
</list></t>

<t>If nothing is found, clients MAY fall back to:</t>

<t><list style="symbols">
  <t><spanx style="verb">HTTPS</spanx> (default transport protocol)</t>
  <t>HTTP <spanx style="verb">POST</spanx> if payload present, otherwise <spanx style="verb">GET</spanx></t>
</list></t>

<ul empty="true"><li>
  <t>Note: This fallback behavior is provided for convenience and basic interoperability, but production systems SHOULD prefer explicit transport bindings or resolver-based discovery for robustness and clarity.</t>
</li></ul>

<t>Clients SHOULD prefer explicit transport bindings (agent+https://) where available, and fall back to resolution-based discovery (agent://) when agent transport metadata is reliably available. Explicit binding reduces resolution ambiguity and improves latency.</t>

</section>
<section anchor="usecases-and-recommendations"><name>Use Cases and Recommended Bindings</name>

<t>The following table outlines some use cases and recommended bindings</t>

<texttable title="Recommended Bindings for Common Use Cases" anchor="tab-use-cases">
      <ttcol align='left'>Use Case</ttcol>
      <ttcol align='left'>Recommended Binding</ttcol>
      <c>Agent with known HTTPS endpoint</c>
      <c><spanx style="verb">agent+https://</spanx></c>
      <c>Local runtime agent</c>
      <c><spanx style="verb">agent+local://</spanx></c>
      <c>Dynamic/multi-transport agents</c>
      <c><spanx style="verb">agent://</spanx> with agent.json</c>
      <c>Inter-agent calls within a known context</c>
      <c><spanx style="verb">agent://</spanx> or agent+matrix://</c>
</texttable>

</section>
</section>
<section anchor="capability-framework"><name>Capability Framework</name>

<t>Agents SHOULD expose a descriptor document at:</t>

<figure><sourcecode type="txt"><![CDATA[
<agent-base-path>/agent.json

]]></sourcecode></figure>

<t>This descriptor MAY follow:</t>

<t><list style="symbols">
  <t>The AgentCard structure (as defined by Google’s Agent2Agent protocol as of April 2025), or another equivalent format</t>
  <t>Any format other than AgentCard SHOULD be expressed in JSON-LD to enable semantic discovery</t>
</list></t>

<t>Agent descriptors SHOULD include:</t>

<t><list style="symbols">
  <t>Agent name and version
  <list style="symbols">
      <t>MAY include <spanx style="verb">supportedVersions</spanx> indicating the list of older versions and their end-points.</t>
      <t>Versioning should follow <xref target="SemVer"></xref> or later</t>
      <t>Clients SHOULD verify compatibility based on documented major, minor, and patch versions</t>
    </list></t>
  <t>Human-readable description</t>
  <t>Input/output schemas (e.g., JSON Schema)</t>
  <t>Capability list with IDs, descriptions, tags, version</t>
  <t>Optional behavioral metadata (e.g., <spanx style="verb">isDeterministic</spanx>, <spanx style="verb">expectedOutputVariability</spanx>, <spanx style="verb">requiresContext: boolean</spanx>, <spanx style="verb">memoryEnabled: boolean</spanx>, <spanx style="verb">responseLatency: "low" | "medium" | "high"</spanx>, <spanx style="verb">confidenceEstimation: boolean</spanx>)
  <list style="symbols">
      <t><spanx style="verb">isDeterministic</spanx> (boolean): Indicates whether repeated calls with identical inputs yield identical outputs.</t>
      <t><spanx style="verb">expectedOutputVariability</spanx>: indicates typical variability in outputs, similar to temperature setting</t>
      <t><spanx style="verb">responseLatency</spanx>: Expected response time.</t>
      <t><spanx style="verb">requiresContext</spanx> (boolean): Indicates whether the input needs context or the agent can work on its own</t>
      <t><spanx style="verb">memoryEnabled</spanx> (boolean): Indicates whether the agent will remember the interactions</t>
    </list></t>
  <t>Optional transport or invocation hints</t>
  <t>Optional authentication or permission requirements</t>
  <t>Optional state management practices</t>
  <t>Optional <spanx style="verb">interactionModel</spanx> to indicate a way to interact (e.g. <spanx style="verb">agent2agent</spanx>, <spanx style="verb">fipa-acl</spanx>, <spanx style="verb">kqml</spanx>, <spanx style="verb">contract-net</spanx>, <spanx style="verb">emergent</spanx> etc). If mentioned, the message payload SHOULD follow the model's defined parameters if any.</t>
</list></t>

<t>Agents MAY expose <spanx style="verb">inputFormats</spanx> and <spanx style="verb">outputFormats</spanx> per capability using standard MIME types (e.g., <spanx style="verb">application/json</spanx>, <spanx style="verb">application/ld+json</spanx>, <spanx style="verb">application/fipa-acl</spanx>).</t>

<t>Agent descriptors SHOULD include input/output schemas (e.g., JSON Schema) and MAY document content negotiation support via the <spanx style="verb">contentTypes</spanx> field per capability. This allows clients to understand and negotiate payload encoding, enabling interoperability across ecosystems that use JSON, JSON-LD, RDF/XML, FIPA ACL, or other formats.</t>

<t>Clients MAY use standard negotiation mechanisms such as <spanx style="verb">Content-Type</spanx> and Accept headers (in HTTP), or envelope metadata (in protocols like JSON-RPC, Matrix, etc.).</t>

<t>Implementations MAY advertise protocol compatility via metadata fields such as <spanx style="verb">interactionModel</spanx>, <spanx style="verb">orchestration</spanx>, or supported <spanx style="verb">envelopeSchemas</spanx> etc. These metadata fields enable clients and agent runtimes to interoperate across heterogeneous ecosystems and communication models.</t>

<t>This extensibility ensures <spanx style="verb">agent://</spanx> can serve as a unifying addressing and invocation layer, bridging agents that follow established standards, platform-specific conventions, or learned behaviors in dynamic environments.</t>

<t>If an <spanx style="verb">agent.json</spanx> is provided, it SHOULD contain at least: <spanx style="verb">name</spanx>, <spanx style="verb">version</spanx>, and one or more capabilities.</t>

<t>Clients SHOULD explicitly specify the agent version either as a URI path segment, query parameter (<spanx style="verb">?version=3.1.4</spanx>), or HTTP header (<spanx style="verb">X-Agent-Version</spanx>). If omitted, servers SHOULD assume the latest version. Agents MUST document their preferred method for version negotiation clearly in their descriptor.</t>

<t>While <spanx style="verb">.well-known/agents.json</spanx> MAY be used to enumerate all available agents under a domain, the individual <spanx style="verb">agent.json</spanx> files serve as the canonical source of truth.</t>

<t>Expressing descriptors in JSON-LD enables semantic interoperability and supports alignment with common web-based data models.</t>

<t>Implementers MAY choose to embed, proxy, or map to other protocols within the <spanx style="verb">agent.json</spanx> descriptor or transport bindings, allowing for seamless orchestration and hybrid deployments.</t>

</section>
<section anchor="interaction-patterns-interaction-patterns"><name>Interaction Patterns        {# interaction-patterns}</name>

<t>Supported interaction types include:</t>

<t><list style="symbols">
  <t>Request/Response (synchronous)</t>
  <t>Deferred response (polling or webhook) SHOULD include a <spanx style="verb">taskId</spanx> and polling interval hint.</t>
  <t>Streaming responses (e.g., Server-Sent Events, WebSocket). Streaming responses over <spanx style="verb">agent+wss://</spanx> SHOULD use newline-delimited JSON (NDJSON)</t>
  <t>Delegated invocation (calling other agents on behalf of user)</t>
  <t>Asynchronous event notifications via HTTP webhooks or WebSockets. Event notifications if available SHOULD include event types, payloads, and identifiers.</t>
</list></t>

<t>All interaction patterns (e.g., streaming, event-driven, polling) are transport-agnostic but MAY impose format constraints (e.g., NDJSON over WebSockets).</t>

<t>Agents SHOULD include status and confidence metadata in responses where applicable.</t>

<section anchor="stateful-interactions-stateful-interactions"><name>Stateful Interactions        {# stateful-interactions}</name>

<t>The <spanx style="verb">agent://</spanx> protocol leverages HTTP’s established mechanisms for state management. Clients and agents SHOULD use standard HTTP headers or query parameters to pass identifiers such as <spanx style="verb">sessionId</spanx> or <spanx style="verb">taskId</spanx>. Agents MAY maintain state across interactions using these identifiers. Clients and agents SHOULD agree on session semantics via capability descriptors or invocation headers.</t>

<t>Non-HTTP transports SHOULD include session or task identifiers within message envelopes (e.g., JSON-RPC headers, WebSocket message metadata, Matrix events). These fields SHOULD follow naming conventions similar to <spanx style="verb">sessionId</spanx>, <spanx style="verb">taskId</spanx>, etc.</t>

<t>When the transport lacks a native header mechanism, agents SHOULD extract session information from the body or envelope metadata.</t>

<t>When content negotiation fails or the requested format is not supported, agents SHOULD respond with a <spanx style="verb">406 Not Acceptable</spanx> HTTP error or equivalent, and MAY include supported formats in the response metadata.</t>

<section anchor="recommended-practices"><name>Recommended practices:</name>

<t><list style="symbols">
  <t>Use HTTP headers (e.g., <spanx style="verb">X-Session-ID</spanx>, <spanx style="verb">X-Task-ID</spanx>) or query parameters for session and task identifiers.</t>
  <t>Clearly document state identifiers and their expected lifecycle in the agent's descriptor (agent.json).</t>
</list></t>

<t><strong>Example</strong>:</t>

<figure><sourcecode type="http"><![CDATA[
GET /tasks/1234 HTTP/1.1
Host: planner.acme.ai
X-Session-ID: abcde-12345

]]></sourcecode></figure>

</section>
</section>
<section anchor="orchestration-patterns"><name>Orchestration Patterns</name>

<t>Agents MAY invoke other agents as part of delegated or composite tasks. Agents SHOULD explicitly provide orchestration workflows, delegation chains, or composite interactions either in their <spanx style="verb">agent.json</spanx> or in their response metadata.</t>

</section>
<section anchor="typical-interaction-flows"><name>Typical Interaction Flows</name>

<section anchor="client-agent-interaction"><name>Client-to-Agent Interaction</name>

<t>A typical user-driven invocation of an agent using the <spanx style="verb">agent://</spanx> protocol follows these steps:</t>

<figure title="Client-to-Agent Interaction Flow" anchor="fig-client-interaction"><sourcecode type="art"><![CDATA[
+--------+       +-----------+       +-------------+
|  User  |  -->  |  Client   |  -->  |  Agent Host |
+--------+       +-----------+       +-------------+
     |                |                    |
     | Initiates      |                    |
     | intent (e.g.,  |                    |
     | "Plan my trip")|                    |
     |                |                    |
     |                | Resolves agent URI |
     |                | --> agents.json / agent.json
     |                | Retrieves capabilities
     |                |                    |
     |                | Constructs request |
     |                | --> agent://planner.acme.ai/generate-itinerary?city=Paris
     |                |                    |
     |                |                    | Agent validates input
     |                |                    | Invokes internal logic or tools
     |                |                    | May call sub-agents (see below)
     |                |                    |
     |                | Receives response  |
     |                | <== itinerary JSON |
     | Presents result to user             |

]]></sourcecode></figure>

<t><strong>Notes</strong>:</t>

<t><list style="symbols">
  <t>The client MAY handle fallback logic if the agent cannot be resolved initially.</t>
  <t>Authentication MAY be required before invocation.</t>
  <t>The invocation can be a simple GET or POST depending on input size and structure.</t>
</list></t>

</section>
<section anchor="agent-to-agent-interaction"><name>Agent-to-Agent Interaction</name>

<t>Agents MAY interact with each other using <spanx style="verb">agent://</spanx> URIs to delegate tasks or compose workflows.</t>

<t><strong>Example: A planning agent invoking a translation agent</strong>:</t>

<figure title="Agent-to-Agent Interaction Flow" anchor="fig-agent-interaction"><sourcecode type="art"><![CDATA[
+-----------------+         +------------------+         +-------------------+
|  Planning Agent |  --->   |  Resolver / URI  |  --->   |  Translation Agent|
+-----------------+         +------------------+         +-------------------+
        |                            |                            |
        | Receives input:            |                            |
        | {"city": "Paris", ...}     |                            |
        |                            |                            |
        | Needs translated output    |                            |
        | for international users    |                            |
        |                            | Resolves URI:              |
        | --> agent://translator.acme.ai/translate?text=Bonjour   |
        |                            |                            |
        |                            | --> Fetch agent.json       |
        |                            | --> Determine transport    |
        |                            |                            |
        |                            |                            | Processes translation
        |                            |                            | Returns JSON { "text": "Hello" }
        | <--------------------------|<---------------------------|
        | Merges result, returns to  |
        | user/client or continues   |

]]></sourcecode></figure>

<t><strong>Chaining Behavior</strong>:</t>

<t><list style="symbols">
  <t>The invoking agent MAY include <spanx style="verb">X-Task-ID</spanx>, <spanx style="verb">X-Delegation-Chain</spanx>, or equivalent headers.</t>
  <t>The response MAY include intermediate metadata such as <spanx style="verb">confidence</spanx>, <spanx style="verb">sourceAgent</spanx>, <spanx style="verb">taskTrace</spanx>, or <spanx style="verb">timeTaken</spanx>.</t>
</list></t>

</section>
</section>
</section>
<section anchor="error-handling-error-handling"><name>Error Handling        {# error-handling}</name>

<t>The <spanx style="verb">agent://</spanx> protocol MAY leverage HTTP standard status codes for signaling errors. Implementations MAY return errors using standard HTTP status codes along with structured JSON error responses conforming to RFC7807 ("Problem Details for HTTP APIs").</t>

<t>**Recommended HTTP status codes include (but are not limited to)</t>

<texttable title="Recommended HTTP status codes" anchor="tab-http-status-codes">
      <ttcol align='left'>Status Code</ttcol>
      <ttcol align='left'>Meaning</ttcol>
      <c>400</c>
      <c>Bad Request (e.g., invalid parameters)</c>
      <c>401</c>
      <c>Unauthorized</c>
      <c>403</c>
      <c>Forbidden</c>
      <c>404</c>
      <c>Capability or resource not found</c>
      <c>409</c>
      <c>Conflict (e.g., state mismatch)</c>
      <c>429</c>
      <c>Too Many Requests (rate limiting)</c>
      <c>500</c>
      <c>Internal Server Error</c>
      <c>503</c>
      <c>Service Unavailable</c>
</texttable>

<t>Example:</t>

<figure><sourcecode type="http"><![CDATA[
HTTP/1.1 404 Not Found
Content-Type: application/problem+json

{
  "type": "https://acme.ai/errors/capability-not-found",
  "title": "Capability Not Found",
  "status": 404,
  "detail": "The requested capability 'generate-itinerary' was not found.",
  "instance": "/planner/generate-itinerary"
}
{: #fig-error-response title="Example HTTP Error Response"}

]]></sourcecode></figure>

<t>This format is not prescriptive but aims to encourage consistency. Implementations MAY adapt the error schema based on their transport layer (e.g., JSON-RPC, HTTP status + body, WebSocket messages).</t>

<t>For non-HTTP transports (e.g., WebSockets, Matrix), agents SHOULD still return structured errors using similar JSON structures (<spanx style="verb">type</spanx>, <spanx style="verb">title</spanx>, <spanx style="verb">detail</spanx>, <spanx style="verb">status</spanx>), encapsulated within the transport’s native message envelope (e.g., JSON-RPC <spanx style="verb">error</spanx> objects, Matrix event content fields). Implementers SHOULD document chosen structures clearly in their capability descriptors.</t>

<t>Where applicable, implementations SHOULD align with existing conventions such as:</t>

<t><list style="symbols">
  <t>JSON-RPC <spanx style="verb">error</spanx> objects (<spanx style="verb">code</spanx>, <spanx style="verb">message</spanx>, <spanx style="verb">data</spanx>)</t>
  <t>OpenAPI/REST error payloads</t>
  <t>GraphQL <spanx style="verb">errors</spanx> array format</t>
</list></t>

<t>Recommended error categories:</t>

<t><list style="symbols">
  <t><spanx style="verb">CapabilityNotFound</spanx></t>
  <t><spanx style="verb">InvalidInput</spanx></t>
  <t><spanx style="verb">AmbiguousResponse</spanx></t>
  <t><spanx style="verb">Timeout</spanx></t>
  <t><spanx style="verb">PermissionDenied</spanx></t>
</list></t>

<t>Clients SHOULD parse and utilize these structured responses to handle errors gracefully.</t>

</section>
<section anchor="security-and-privacy"><name>Security and Privacy Considerations</name>

<t>The <spanx style="verb">agent://</spanx> protocol explicitly relies on widely-adopted HTTP authentication and authorization standards. Agents SHOULD support standard authentication and authorization schemes such as OAuth2 (Bearer tokens), API keys, or signed payloads. When using HTTPS, mutual TLS MAY be employed. JSON Web Tokens (JWT) are RECOMMENDED for conveying signed claims between agents.</t>

<t>Security extensions MAY include:</t>

<t><list style="symbols">
  <t>OAuth2 Bearer Tokens (RFC6750)</t>
  <t>JSON Web Tokens (JWT) (RFC7519)</t>
  <t>Mutual TLS (mTLS) authentication (RFC8705)</t>
  <t>API Keys via HTTP headers (e.g., <spanx style="verb">X-API-Key</spanx>)</t>
  <t>Capability-based access control</t>
  <t>Delegation chains</t>
</list></t>

<t>For non-HTTP transports (e.g., WebSocket, Matrix), agents SHOULD leverage native authentication mechanisms, such as WebSocket protocol-level authentication tokens or Matrix homeserver authentication flows. Agents MUST clearly document supported security mechanisms per transport binding.</t>

<t>When using Decentralized Identifiers (DIDs) as authority, agent descriptors MAY be cryptographically signed. Clients SHOULD verify such signatures against the corresponding DID Document.</t>

<t>For agent-to-agent delegation, agents SHOULD include delegation metadata (e.g., <spanx style="verb">X-Delegation-Chain</spanx>) that identifies prior actors. These chains SHOULD be signed or verifiable via claims (e.g., using JWT, Verifiable Credentials, or DID-linked proofs).</t>

<t>Privacy recommendations:</t>

<t>Agents SHOULD adhere to privacy best practices, including:</t>

<t><list style="symbols">
  <t>Data minimization (collect only necessary data)</t>
  <t>Explicit consent and revocation mechanisms</t>
  <t>Clear logging/audit trails</t>
  <t>Ethical AI guidelines, including bias detection and fairness assessments as they evolve</t>
</list></t>

<section anchor="compliance-and-regulatory-considerations"><name>Compliance and Regulatory Considerations</name>

<t>Implementers SHOULD ensure compliance with relevant legal frameworks (e.g., GDPR, CCPA) of the jurisdictions where the agent is hosted. Agents processing sensitive data SHOULD provide audit trails and explicit consent mechanisms clearly documented in capability descriptors.</t>

</section>
</section>
<section anchor="extensibility"><name>Extensibility</name>

<t>The protocol supports extension via:</t>

<t><list style="symbols">
  <t>Namespaced capability vocabularies</t>
  <t>Alternate transport bindings</t>
  <t>Extended agent descriptors</t>
  <t>Optional orchestration layers (task graphs, workflows)</t>
</list></t>

<t>Extension proposals SHOULD be documented clearly, and ideally reviewed through established processes such as community forums, dedicated working groups, or public registries to ensure transparency and interoperability.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requests the registration of the <spanx style="verb">agent</spanx> URI scheme in the IANA "Uniform Resource Identifier (URI) Schemes" registry.</t>

<section anchor="uri-schem-registration-template"><name>URI Scheme Registration Template</name>

<t><list style="symbols">
  <t><strong>Scheme Name</strong>: <spanx style="verb">agent</spanx></t>
  <t><strong>Status</strong>: Provisional</t>
  <t><strong>Applications/Protocols That Use This Scheme</strong>:<br />
The <spanx style="verb">agent</spanx> URI scheme identifies and invokes autonomous or semi-autonomous software agents across systems. It provides transport-agnostic addressing layer supporting discovery, invocation and orchestration. The scheme is compatible with existing schemes such as <spanx style="verb">https</spanx>, <spanx style="verb">did</spanx> and <spanx style="verb">web+</spanx> schemes where appropriate.</t>
  <t><strong>Contact</strong>:<br />
Yaswanth Narvaneni<br />
<eref target="mailto:yaswanth@gmail.com">yaswanth@gmail.com</eref></t>
  <t><strong>Change Controller</strong>:<br />
The author or a relevant standards body such as the IETF if adopted.</t>
  <t><strong>References</strong>:<br />
This document (Internet-Draft): <em>agent:// Protocol — A URI-Based Framework for Interoperable Agents</em><br />
<xref target="RFC3986"></xref> — Uniform Resource Identifier (URI): Generic Syntax<br />
<xref target="RFC7595"></xref> — Guidelines and Registration Procedures for URI Schemes</t>
  <t><strong>URI Syntax</strong>:<br />
The general form of an <spanx style="verb">agent</spanx> URI is:</t>
</list></t>

<figure><sourcecode type="txt"><![CDATA[
agent:[+<protocol>]://<authority>/<path>[?<query>][#<fragment>]

]]></sourcecode></figure>

<t>Where:
- <spanx style="verb">authority</spanx> is typically a domain name or Decentralized Identifier (DID)<br />
- <spanx style="verb">path</spanx> is an opaque agent-specific capability or namespace<br />
- <spanx style="verb">query</spanx> includes serialized key-value parameters<br />
- <spanx style="verb">fragment</spanx> MAY reference a sub-capability or context<br />
- The optional <spanx style="verb">+&lt;protocol&gt;</spanx> segment indicates an explicit transport binding (e.g., <spanx style="verb">agent+https://</spanx>)</t>

<t>Detailed ABNF is specified in <xref target="uri-abnf"></xref> of this document.</t>

<t><list style="symbols">
  <t><strong>Security Considerations</strong>:<br />
The <spanx style="verb">agent</spanx> scheme does not introduce new transport-layer vulnerabilities but inherits risks from underlying protocols such as HTTP, WebSocket, or local execution environments. Implementers should apply standard authentication and authorization measures, such as OAuth2, JWTs, or mutual TLS. See Section 10 for security and privacy guidance.</t>
</list></t>

</section>
</section>
<section anchor="example-agent-descriptor"><name>Appendix A. Example Agent Descriptor</name>

<t>Following is an example of <spanx style="verb">agent.json</spanx>.</t>

<figure title="Example Agent Descriptor in JSON-LD" anchor="fig-agent-descriptor"><sourcecode type="json-ld"><![CDATA[
{
  "@context": "https://example.org/agent-context.jsonld",
  "name": "planner.acme.ai",
  "description": "Planning agent helps in researching, generating and managing itineraries",
  "url": "agent://planner.acme.ai/",
  "provider": {
    "organization": "ACME AI"
  },
  "documentationUrl": "https://planner.acme.ai/docs",
  "interactionModel": "agent2agent",
  "orchestration": "delegation",
  "envelopeSchemas": ["fipa-acl"],
  "version": 3.1.4,
  "supportedVersions": {
    "3.0.0": "/v3/",
    "2.1.2": "/olderversion/v2.1.2/",
    "1.0": "/version-1/"
  },
  "capabilities": [
    {
      "name": "generate-itinerary",
      "version": "2.1.5",
      "description": "Creates a travel itinerary for a given city.",
      "input": { "city": "string" },
      "output": { "itinerary": "array" },
      "isDeterministic": false,
      "expectedOutputVariability": "medium",
      "contentTypes": {
        "inputFormat": ["application/json", "application/ld+json"],
        "outputFormat": ["application/json"]
      }
    }
  ],
  "authentication": {
    "schemes": ["OAuth2"]
  },
  "skills": [
    {
        "id": "agent-skill-1",
        "name": "research-location"
    }
  ]
}

]]></sourcecode></figure>

<t>A JSON-LD context is added to support semantic querying and graph-based processing.</t>

</section>
<section anchor="use-cases"><name>Appendix B. Use Cases</name>

<t><list style="symbols">
  <t>Composing workflows with agents from different vendors</t>
  <t>Enabling discovery and invocation in agent marketplaces</t>
  <t>Facilitating human-in-the-loop workflows with agent transparency</t>
  <t>Building knowledge-based agents that invoke retrieval agents</t>
  <t>Real-time collaboration among specialized agents</t>
</list></t>

</section>
<section anchor="reference-implementation"><name>Appendix C. Reference Implementation</name>

<t>A reference implementation of the <spanx style="verb">agent://</spanx> protocol is available to guide implementers, demonstrating the following functionalities:</t>

<t><list style="symbols">
  <t>URI parsing and resolution (<spanx style="verb">agent.json</spanx>, <spanx style="verb">.well-known</spanx> endpoints)</t>
  <t>Transport bindings including HTTPS, WebSocket, Matrix, and Local IPC</t>
  <t>Capability descriptor discovery, caching, and semantic processing</t>
  <t>Orchestration and delegation chaining examples</t>
  <t>Error handling, payload negotiation, and versioning patterns</t>
  <t>Security examples covering OAuth2, JWT, and mutual TLS (mTLS)</t>
</list></t>

<t>The implementation is open-source and maintained at:</t>

<t><xref target="AGENT-URI-REPO"></xref></t>

<t>Implementers are encouraged to use this as a starting point or reference during their implementation efforts.</t>

</section>
<section numbered="false" anchor="acknowledgements"><name>Acknowledgements</name>

<t>This draft reflects observations and aspirations drawn from emerging agent ecosystems. It builds on publicly available research, community discussions, and early experimentation with agent-oriented protocols. It is intended as a foundation for future refinement and collaboration.</t>

</section>


  </middle>

  <back>


<references title='References' anchor="sec-combined-references">

    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC3986">
  <front>
    <title>Uniform Resource Identifier (URI): Generic Syntax</title>
    <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
    <author fullname="R. Fielding" initials="R." surname="Fielding"/>
    <author fullname="L. Masinter" initials="L." surname="Masinter"/>
    <date month="January" year="2005"/>
    <abstract>
      <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="66"/>
  <seriesInfo name="RFC" value="3986"/>
  <seriesInfo name="DOI" value="10.17487/RFC3986"/>
</reference>

<reference anchor="RFC6570">
  <front>
    <title>URI Template</title>
    <author fullname="J. Gregorio" initials="J." surname="Gregorio"/>
    <author fullname="R. Fielding" initials="R." surname="Fielding"/>
    <author fullname="M. Hadley" initials="M." surname="Hadley"/>
    <author fullname="M. Nottingham" initials="M." surname="Nottingham"/>
    <author fullname="D. Orchard" initials="D." surname="Orchard"/>
    <date month="March" year="2012"/>
    <abstract>
      <t>A URI Template is a compact sequence of characters for describing a range of Uniform Resource Identifiers through variable expansion. This specification defines the URI Template syntax and the process for expanding a URI Template into a URI reference, along with guidelines for the use of URI Templates on the Internet. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6570"/>
  <seriesInfo name="DOI" value="10.17487/RFC6570"/>
</reference>

<reference anchor="RFC7231">
  <front>
    <title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
    <author fullname="R. Fielding" initials="R." role="editor" surname="Fielding"/>
    <author fullname="J. Reschke" initials="J." role="editor" surname="Reschke"/>
    <date month="June" year="2014"/>
    <abstract>
      <t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems. This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7231"/>
  <seriesInfo name="DOI" value="10.17487/RFC7231"/>
</reference>

<reference anchor="RFC6750">
  <front>
    <title>The OAuth 2.0 Authorization Framework: Bearer Token Usage</title>
    <author fullname="M. Jones" initials="M." surname="Jones"/>
    <author fullname="D. Hardt" initials="D." surname="Hardt"/>
    <date month="October" year="2012"/>
    <abstract>
      <t>This specification describes how to use bearer tokens in HTTP requests to access OAuth 2.0 protected resources. Any party in possession of a bearer token (a "bearer") can use it to get access to the associated resources (without demonstrating possession of a cryptographic key). To prevent misuse, bearer tokens need to be protected from disclosure in storage and in transport. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6750"/>
  <seriesInfo name="DOI" value="10.17487/RFC6750"/>
</reference>

<reference anchor="RFC7519">
  <front>
    <title>JSON Web Token (JWT)</title>
    <author fullname="M. Jones" initials="M." surname="Jones"/>
    <author fullname="J. Bradley" initials="J." surname="Bradley"/>
    <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
    <date month="May" year="2015"/>
    <abstract>
      <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7519"/>
  <seriesInfo name="DOI" value="10.17487/RFC7519"/>
</reference>

<reference anchor="RFC7807">
  <front>
    <title>Problem Details for HTTP APIs</title>
    <author fullname="M. Nottingham" initials="M." surname="Nottingham"/>
    <author fullname="E. Wilde" initials="E." surname="Wilde"/>
    <date month="March" year="2016"/>
    <abstract>
      <t>This document defines a "problem detail" as a way to carry machine- readable details of errors in a HTTP response to avoid the need to define new error response formats for HTTP APIs.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7807"/>
  <seriesInfo name="DOI" value="10.17487/RFC7807"/>
</reference>

<reference anchor="RFC8705">
  <front>
    <title>OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens</title>
    <author fullname="B. Campbell" initials="B." surname="Campbell"/>
    <author fullname="J. Bradley" initials="J." surname="Bradley"/>
    <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
    <author fullname="T. Lodderstedt" initials="T." surname="Lodderstedt"/>
    <date month="February" year="2020"/>
    <abstract>
      <t>This document describes OAuth client authentication and certificate-bound access and refresh tokens using mutual Transport Layer Security (TLS) authentication with X.509 certificates. OAuth clients are provided a mechanism for authentication to the authorization server using mutual TLS, based on either self-signed certificates or public key infrastructure (PKI). OAuth authorization servers are provided a mechanism for binding access tokens to a client's mutual-TLS certificate, and OAuth protected resources are provided a method for ensuring that such an access token presented to it was issued to the client presenting the token.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8705"/>
  <seriesInfo name="DOI" value="10.17487/RFC8705"/>
</reference>

<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>

<reference anchor="RFC7595">
  <front>
    <title>Guidelines and Registration Procedures for URI Schemes</title>
    <author fullname="D. Thaler" initials="D." role="editor" surname="Thaler"/>
    <author fullname="T. Hansen" initials="T." surname="Hansen"/>
    <author fullname="T. Hardie" initials="T." surname="Hardie"/>
    <date month="June" year="2015"/>
    <abstract>
      <t>This document updates the guidelines and recommendations, as well as the IANA registration processes, for the definition of Uniform Resource Identifier (URI) schemes. It obsoletes RFC 4395.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="35"/>
  <seriesInfo name="RFC" value="7595"/>
  <seriesInfo name="DOI" value="10.17487/RFC7595"/>
</reference>


<reference anchor="JSON-LD11" target="https://www.w3.org/TR/json-ld11/">
  <front>
    <title>JSON-LD 1.1: A JSON-based Serialization for Linked Data</title>
    <author initials="M." surname="Sporny">
      <organization></organization>
    </author>
    <author initials="D." surname="Longley">
      <organization></organization>
    </author>
    <author initials="G." surname="Kellogg">
      <organization></organization>
    </author>
    <author initials="M." surname="Lanthaler">
      <organization></organization>
    </author>
    <author initials="P." surname="Champin">
      <organization></organization>
    </author>
    <author initials="N." surname="Lindström">
      <organization></organization>
    </author>
    <date year="2020" month="July"/>
  </front>
  <seriesInfo name="W3C" value="Recommendation"/>
</reference>
<reference anchor="DID-CORE" target="https://www.w3.org/TR/did-core/">
  <front>
    <title>Decentralized Identifiers (DIDs) v1.0</title>
    <author initials="M." surname="Sporny">
      <organization></organization>
    </author>
    <author initials="D." surname="Longley">
      <organization></organization>
    </author>
    <author initials="M." surname="Sabadello">
      <organization></organization>
    </author>
    <author initials="D." surname="Reed">
      <organization></organization>
    </author>
    <author initials="O." surname="Steele">
      <organization></organization>
    </author>
    <author initials="C." surname="Allen">
      <organization></organization>
    </author>
    <date year="2022" month="July"/>
  </front>
  <seriesInfo name="W3C" value="Recommendation"/>
</reference>


    </references>

    <references title='Informative References' anchor="sec-informative-references">

<reference anchor="SemVer" target="https://semver.org/">
  <front>
    <title>Semantic Versioning 2.0.0</title>
    <author initials="T." surname="Preston-Werner">
      <organization></organization>
    </author>
    <date year="2013"/>
  </front>
</reference>
<reference anchor="Agent2Agent" target="https://github.com/google/A2A">
  <front>
    <title>Agent2Agent Protocol</title>
    <author initials="" surname="Google LLC">
      <organization></organization>
    </author>
    <date year="2025" month="April"/>
  </front>
</reference>
<reference anchor="AgentCard" target="https://github.com/google/A2A/blob/main/specification/json/a2a.json">
  <front>
    <title>Agent Card Schema from Agent2Agent Protocol</title>
    <author initials="" surname="Google LLC">
      <organization></organization>
    </author>
    <date year="2025" month="April"/>
  </front>
</reference>
<reference anchor="MCP" target="https://modelcontextprotocol.io/specification/">
  <front>
    <title>Model Context Protocol (MCP)</title>
    <author initials="" surname="Anthropic PBC">
      <organization></organization>
    </author>
    <date year="2025" month="March"/>
  </front>
</reference>
<reference anchor="LangChain" target="https://python.langchain.com/v0.3/docs/">
  <front>
    <title>LangChain Documentation</title>
    <author initials="" surname="LangChain Team">
      <organization></organization>
    </author>
    <date year="2024"/>
  </front>
</reference>
<reference anchor="SemanticKernel" target="https://github.com/microsoft/semantic-kernel">
  <front>
    <title>Semantic Kernel SDK</title>
    <author initials="" surname="Microsoft">
      <organization></organization>
    </author>
    <date year="2024"/>
  </front>
</reference>
<reference anchor="AutoGen" target="https://microsoft.github.io/autogen/">
  <front>
    <title>AutoGen: Enabling LLM Applications with Multi-Agent Conversations</title>
    <author initials="" surname="Microsoft Research">
      <organization></organization>
    </author>
    <date year="2024"/>
  </front>
</reference>
<reference anchor="OpenAPI" target="https://spec.openapis.org/oas/latest.html">
  <front>
    <title>OpenAPI Specification v3.1.0</title>
    <author initials="" surname="OpenAPI Initiative">
      <organization></organization>
    </author>
    <date year="2024" month="October"/>
  </front>
</reference>
<reference anchor="GraphQL" target="https://spec.graphql.org/October2021/">
  <front>
    <title>GraphQL: A Query Language for APIs</title>
    <author initials="" surname="GraphQL Foundation">
      <organization></organization>
    </author>
    <date year="2021" month="October"/>
  </front>
</reference>
<reference anchor="FIPA-ACL" target="http://www.fipa.org/specs/fipa00061/SC00061G.html">
  <front>
    <title>FIPA ACL Message Structure Specification</title>
    <author initials="" surname="Foundation for Intelligent Physical Agents">
      <organization></organization>
    </author>
    <date year="2002"/>
  </front>
</reference>
<reference anchor="AGENT-URI-REPO" target="https://github.com/agent-uri/agent-uri">
  <front>
    <title>Agent URI Protocol Reference Implementation</title>
    <author initials="Y." surname="Narvaneni">
      <organization></organization>
    </author>
    <date year="2025"/>
  </front>
</reference>


    </references>

</references>



  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA71923LbWLbYu6r0Dzt0khHbBCnZ7ukZTds9siS7dcYXjSSf
nimX6xAkNkmMQYADgJI5bU/N03lOcvKSquQ38gP5k/6SrOveGyApy+nO8YMs
Afu+1/2GKIp2d+q0zuyh6VzNrImnNq8PBwNzXhZ1MS4y89M//rs5Mm8uzqKn
cWUT86yM5/amKN+bSVGas7y2ZbGwZTzKrDnC3lVndycejUp7DWPSeNGyTOHh
OK7ttChXh6aqk92dpBi/gqEOTVLGkzrK4/I6zm2eRq5PtL+/u5MuykNTl8uq
frC//9v9BzB4aeNDc7RYZCkMmRZ5tbuDC5qWxXJxCEtK7MLCj7w2l8vRPK0q
aLO7896uoFVyyGvObR2d4MS7O7s7VR3nyb/EWZHDclYWxlukh+YtHEDPVEVZ
l3ZSwW+rOf7yDnvEy3pWlIe7OwYO0MC/NK8OzZ/75pVugx/ntMM/x9VNnNez
9tuinMZ5+jfaRHPhF7aycTme2ZJb2nmcZrA2Gej3U/y7Py7m/Hqc1nCsL4o8
wZ3u7uRFOYdRry2u0Fw8O35wcPBb/f3hb3/za/39119/s6+/f/Pg4YF7/s3X
/vnXvu83v9n/Rn//zTf7X7vfD7555Nv/lp//0+XrV9GLkwMe1RgFNHluDvoH
cI/cbETAdWnLNM7kRAjAXqT5e3hxEtdxh0fxR0//IqO/ySW87JvLRVHmK9ei
1eCkjyc1zezWFs/75g82y4rp9LZZXuBNxJle0fow531zPIvnizTf1uJVHzeY
VHX5f/63XGUCWHJoHuw/2I/2v+FHFZyKrdJ8Urhd//Dw+BCABABgDhBDxyVn
HJdTWx+aWV0vKkDkm5ub/s3DPkDa4Opi8JeqyKMsOTgYYOuTs5Po+PXFaet6
TuwYQLDEe4CTP0N4TCepLSuzBz2qrrk+6O//+10GDhGP4gQv5JZRLqxNtr1+
DUPU1mZ2W4PjvjnKMpu3ruDB/4crSNIkGhelHSCe4oAhpl7a+T/bsnkf8AwA
LR0beIOULM2n5kF/v7+/+QZaO7vqAym3VQ33/gNSvbK5xYOHm9dc2fm1LWnN
2IAI+wP62Vxc8MKxjDut63lRwKWbFy+OW2f+dbT/aPOapmk9W46Q6A2m1Htw
9ODIre44BtreBGReFr4wl0BK57GZlMV845o7W1exBuEbl3+ntQ5GWTEaAOXO
B9XCjgGpmH8RWg7iB3Eff8EBXx6fN/fysgD4N8cFsK4PftVmDxp273TeR0Cr
gFEDGJ0/3XDkW8BgjtOOedaFTNpPi9bysS8QwykQuzRvrts9NifFeAmIUgeI
8pkl+75XNm5Txy0wsljBkHk/g65j7Eo3cL3ffzgAcaMaCI4RPv0B0SHbgmv8
0lye/OFOS32ZjsuiKlCauMsqA+iYa09EOZo7ek9zE2Av6+K5zdtgLU/NaQ5S
F5KDFy9eNuQhcwMTmJfLrE4jQYIiB3yu+PUW2r1tT04Yudvm3I76sk2AF5iq
gHXQ+b8GGefo/Ky1KXkK3CKALHP9sL+d17SJvIxwlqd1SiS1vd7oYH8LtYNJ
+yDF5vEirYjoFXE1yKBjVfdn9Zwu43kZL2Z/fNFatz4FOeaPS1uuCGqXIMKS
9ALrueNpyzjmWbFsMBO3+oPbVz/F/n/NaPGvx3UxsiV2ohN/dnZ+FB0dt5eO
jw08Ni9tVeGKL0HMHtfL0jZv4W4b8At3ikGWpUxkZ6sKxspEP2huDCX69q6E
aU7SRUwbwh1WA/xzf3//1weDy2P6/7m7m6Pnp6+uIlRSLk7PX29kA/DS080L
O7GlzcfWnM0XmXV0aY0N3MYD1qX9W/DcKTX+t92dKIpMPALpLx6THnI1SyuT
CKE0iZ2kua1MDXrZUBWzoVE63DMxqWUsOU8aalmcJMD0QV6Z9mCt18V7+g2U
HPhLFbYaKQcRCsTOvJgXy4qaACECJcw/Q1y+AaWLlcOqb85qHKYskuUYlheb
LF7BaSYGaURaWwYhEI1rUy0XIP3VlZmneToHCEgbxw0SpV8pzQ1HkVfYpUt/
AtuxeZWibjmxMY4LXcbxIh6lGag8JkmrcQGEbdUzyKXwHEFRK1BxwlPFObp9
g4qtnpqJ0zkcaQHHVMFJBOchQ8bzAtdCWzUxkrLKgJBXraD5HAZfAFlAoa3i
8wQOCYJyDcJhz1ilx3Dhi6IilRjbwLRZPCpKIko0o2KGjNrHy0dgmKdJglLq
7s49xCA6YkIp+PfjvTR48onhxZoyrawpJs1hmzdmcpDo4YxrJGhwX6TuglRE
8v1NvMLjSFnMXwm82J6sHDTmNId+CIVzPY8kRWZi/Vn0zQ+zNPOnXJksfW/N
91dX5/jsGkaHed3lmrkF7pyn1ZygtUJoGBOx7OmSk3QCKGqqdJoTIcrrbAVL
MyM7i6/TooRbXtaLZW2uY1AZ+e4CCI/52BZxjbp+xTDQRCK4IToNJAwViod8
WQBiRbak3iT9ABriIuCk4JTwYhl+ATTTilCIBsU382WufMtBGx1DIHDugRjY
7RklvT0S6XC15pUN5brjV+fQzEtAth4T3oEeco2rRkw1LdxxyMAIyRiIJAEa
ZwDUFd4CXCNc3ObVEhj+/e9/3925H639u7+785F30hA1Pm5rrMzhp3/9N/zx
X7cParzVCe/CmI/Q/r+Yo4CGXbhL6ZkT3ebPm5mabF1SqCMYWpL7CVfT6+OF
yCNc63HjPPUaqy+eub10s+Hfz9jWlUPAFwQhblsbXuC2EH975gc7uizG7y2S
VoTDL56YQOrHQ3Nvkk4jBbYIsH78npn0405TGwNJBN8dBfykQwSPSd4GZug4
zSGRUvMmT/+6DBD6momxRxigmLFIIxGIjnhvwJ4qm00iQPhxmY6IkCurSS01
BGytAO1xrUgm5b5Vcq8MwqWnDI7eUV/Y3JRmBx4gqxVeDSLEGOiLEismGkB6
7DRmkA8YCP6Ju2rwuHXZAYhj5oSHhrZGc24VKUZ2mua5kwxSoMQt+kgsOaHt
gUK5nM5MyI/p6Ba8TE/u4Syxh7BMZercxZFo3MQR3JZKZk1RAS9sy6oNbDy+
jtOM7hiodGKBh9PZ2ICcb17QZmFi7YQDTuIkRrSIYcM4KRb0B3ApAyIbcAq8
C/shxpbtfcQgH75tyqvvmOFf2RLEpCIrpivm97V/8InB+quvCFG++goV+lBu
Qy66TWxDxg7bI3aASyxBGmBBpCKBnwQx3AhIQcjNDTNPvBE3ozmRm4WJ9ugK
yFbRpZWYeQyImtuotHFCl+DgkCYVhLLMtLDzT//4H5WIHMi2QzTjw1c2L2s4
drfEExKeosQHvBGF32XO/B5Wpz3dXAA5AFK6G+IkcMk6TnmdAqxBcy+S0Jrn
8UKFA4CoGESomqRrgP1FkeKo2KWG/daxDH3mKAIOTt6UMc4O28tILIxDaENQ
0BUyruUozixiFORrXjCTu/d2hWw8qcxP//ifL99cXv30j//V09/Nq9fu74vT
P745uzg90b8vvz968aLxR9j68vvXb16cNP9qjnb8+uXL01cnfkB4azY8fnn0
Z/oVLw7+fH1+dfb61RHOjBJb3SBMCJBwoCOWg8tFCXtNUJ5RIEEBzjw9PjcH
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

-->

</rfc>

