name: Release and Publish to PyPI

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v0.2.0, v1.0.0, etc.
  workflow_dispatch:  # Allow manual triggering
    inputs:
      version:
        description: 'Version to release (e.g., 0.2.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Get version from tag or input
      id: get-version
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=${{ github.event.inputs.version }}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"

    - name: Validate version matches pyproject.toml
      run: |
        PROJECT_VERSION=$(poetry version -s)
        RELEASE_VERSION=${{ steps.get-version.outputs.version }}
        if [ "$PROJECT_VERSION" != "$RELEASE_VERSION" ]; then
          echo "ERROR: Version mismatch!"
          echo "pyproject.toml version: $PROJECT_VERSION"
          echo "Release version: $RELEASE_VERSION"
          exit 1
        fi
        echo "âœ“ Version validation passed: $PROJECT_VERSION"

    - name: Run full test suite
      run: |
        poetry install
        poetry run pytest
        poetry run flake8 agent_uri/ --max-line-length=88 --extend-ignore=W503,E203
        poetry run mypy agent_uri/ || echo "Type checking found issues (non-blocking for now)"

    - name: Security gate check
      run: |
        echo "Running security gate checks..."
        poetry run bandit -r agent_uri/ -x "*/tests/*,*/test_*.py"
        poetry run safety check --ignore=67599
        poetry run pip-audit --desc --format json --output release-security-report.json
        echo "All security checks passed!"

    - name: Upload release security report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: release-security-report
        path: release-security-report.json
        retention-days: 90

  build-package:
    name: Build Distribution Package
    runs-on: ubuntu-latest
    needs: validate-release

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Build package
      run: poetry build

    - name: Check package
      run: |
        poetry check
        python -m pip install --upgrade pip
        pip install twine
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/

  test-pypi-publish:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build-package]
    environment: test-pypi

    steps:
    - uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

    - name: Test installation from Test PyPI
      run: |
        sleep 60  # Wait for package to be available
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ agent-uri==${{ needs.validate-release.outputs.version }}
        python -c "import agent_uri; print('Test PyPI installation successful:', agent_uri.__version__)"

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, test-pypi-publish]

    steps:
    - uses: actions/checkout@v4

    - uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.validate-release.outputs.version }}
        name: Release v${{ needs.validate-release.outputs.version }}
        draft: false
        prerelease: false
        make_latest: true
        generate_release_notes: true
        files: |
          dist/*
        body: |
          ## Agent URI Protocol v${{ needs.validate-release.outputs.version }}

          ### Installation
          ```bash
          pip install agent-uri==${{ needs.validate-release.outputs.version }}
          ```

          ### What's New
          - See [CHANGELOG.md](CHANGELOG.md) for detailed changes

          ### Usage
          ```python
          from agent_uri import parse_agent_uri

          uri = parse_agent_uri("agent://example.com/my-agent")
          print(f"Host: {uri.host}, Path: {uri.path}")
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  production-pypi-publish:
    name: Publish to Production PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    environment: production-pypi

    steps:
    - uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

    - name: Verify PyPI publication
      run: |
        sleep 120  # Wait for package to be available on PyPI
        pip install agent-uri==${{ needs.validate-release.outputs.version }}
        python -c "import agent_uri; print('PyPI publication successful:', agent_uri.__version__)"

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, production-pypi-publish]

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update documentation
      run: |
        echo "## ðŸŽ‰ Release v${{ needs.validate-release.outputs.version }} Published!" >> release-notes.md
        echo "" >> release-notes.md
        echo "The package is now available on PyPI:" >> release-notes.md
        echo "\`\`\`bash" >> release-notes.md
        echo "pip install agent-uri==${{ needs.validate-release.outputs.version }}" >> release-notes.md
        echo "\`\`\`" >> release-notes.md

    - name: Notify success
      run: |
        echo "âœ… Release v${{ needs.validate-release.outputs.version }} completed successfully!"
        echo "ðŸ“¦ Available on PyPI: https://pypi.org/project/agent-uri/${{ needs.validate-release.outputs.version }}/"
        echo "ðŸš€ GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-release.outputs.version }}"
