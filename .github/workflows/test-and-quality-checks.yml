name: Test and Quality Checks

on:
  push:
    branches: [ main, develop, task/* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      publish_to_testpypi:
        description: 'Publish to TestPyPI after successful tests'
        required: false
        default: false
        type: boolean

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10.x, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        enable-cache: true

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run linting
      run: |
        poetry run flake8 agent_uri/ --max-line-length=88 --extend-ignore=W503,E203
        poetry run black --check agent_uri/ --line-length=88
        poetry run isort --check-only agent_uri/ --profile=black --line-length=88

    - name: Run type checking
      run: |
        poetry run mypy agent_uri/

    - name: Run tests
      run: poetry run pytest --cov=agent_uri --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: poetry install

    - name: Run security checks
      run: |
        poetry run bandit -r agent_uri/ -x "*/tests/*,*/test_*.py"
        poetry run safety check --ignore=67599

    - name: Run pip audit
      run: |
        echo "Running pip audit for vulnerability scanning..."
        poetry run pip-audit --desc --format json --output pip-audit-report.json
        echo "Pip audit completed. No vulnerabilities found."

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-${{ matrix.python-version }}
        path: |
          pip-audit-report.json
        retention-days: 30

  build-test:
    name: Test Package Build
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Build package
      run: poetry build

    - name: Check package
      run: poetry check

    - name: Test wheel installation
      run: |
        pip install dist/*.whl
        python -c "import agent_uri; print('Version:', agent_uri.__version__)"

  publish-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: [test, security, build-test]
    if: github.event.inputs.publish_to_testpypi == 'true' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    environment:
      name: testpypi
      url: https://test.pypi.org/p/agent-uri
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Build package
      run: poetry build

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

    - name: Verify TestPyPI upload
      run: |
        echo "Package published to TestPyPI!"
        echo "You can install it with: pip install -i https://test.pypi.org/simple/ agent-uri"
        echo "View at: https://test.pypi.org/project/agent-uri/"
